=============================
 Serial protocol description
=============================

To transfer frame on the serial line, a framing protocol is used.

Frame description
=================

::

    +--------------------------------------------+
    |                    FRAME                   |
    +------------+---------+----------+----------+
    | START_BYTE | PAYLOAD | CHECKSUM | END_BYTE |
    +------------+---------+----------+----------+
    0            1       N+1        N+2        N+3

+------------+--------------+---------------------------------------------------+
| Name       | Size (bytes) | Description                                       |
+============+==============+===================================================+
| START_BYTE | 1            | The frame start byte used to start the frame.     |
+------------+--------------+---------------------------------------------------+
| PAYLOAD    | N            | The frame payload (could be empty).               |
|            |              | Reserved bytes (START_BYTE, END_BYTE and ESC_BYTE)|
|            |              | are escaped using ESC_BYTE.                       |
+------------+--------------+---------------------------------------------------+
| CHECKSUM   | 1            | Checksum of PAYLOAD, non-escaped, using algorithm |
|            |              | described in :ref:`sp-checksum`.                  |
+------------+--------------+---------------------------------------------------+
| END_BYTE   | 1            | The frame end byte used to close the frame.       |
+------------+--------------+---------------------------------------------------+

Special Byte description
------------------------

+------------+-------+
| Name       | Value |
+============+=======+
| START_BYTE | 0x10  |
+------------+-------+
| ESC_BYTE   | 0xFF  |
+------------+-------+
| END_BYTE   | 0x1B  |
+------------+-------+


.. _sp-checksum:

Checksum computation
====================

.. code-block:: c

    checksum = 0;
    for (i = 0; i < payload_size; i++) {
        checksum ^= payload[i]
    }


Example
=======

::

                       +----------------------------------+
                       |              PAYLOAD             |
                       +------+------+------+------+------+
                       | 0x33 | 0x1a | 0xfe | 0x10 | 0xc0 |
                       +------+------+------+------+------+

                                        ||
                                        \/

  +----------------------------------------------------------------------------+
  |                                 FRAME                                      |
  +------------+-----------------------------------------+----------+----------+
  | START_BYTE |                   PAYLOAD               | CHECKSUM | END_BYTE |
  +------------+------+------+------+------+------+------+----------+----------+
  |    0x10    | 0x33 | 0x1a | 0xfe | 0x1b | 0x10 | 0xc0 |   0x07   |   0xff   |
  +------------+------+------+------+------+------+------+----------+----------+
